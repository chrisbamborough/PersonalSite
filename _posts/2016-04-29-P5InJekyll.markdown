---
layout: post
title:  "Using P5.js with Jekyll"
date:   2016-04-29 19:45:00
categories: blog
tags: Creative Code, p5.js
image:
---

<div id="postCanvas" style="position: relative; border: 1px solid black; height: 450px;"></div>
<script src="/js/p5Sketches/firstP5Sketch.js" type="text/javascript"></script>


Press any button to clear the canvas.

I have been playing around with [processing](https://processing.org) for a few years now but never really got stuck in because of the difficulty to share on the web (without annoying aplets). [Processing.js](https://www.processingjs.org) offered a way to use processing in the browser, but involved an extra layer of translation from java (processing) into javascript. Enter [p5.js](https://www.p5js.org), the intuition of processing but using native java script in the browser.



The P5 series of javascript [libraries](https://p5js.org/libraries/) provide means to play with the DOM (Document Object Model), Sound, Interaction, Data streams, Image, Video to name just a few.

So I have been playing with the P5.js IDE which has a built in web-server, but I wanted to start publishing my experiments to this site. As it is a jekyll site and posts are written in markdown I had to find a work around.

The first thing to do was include the p5.js libraries into the head of the Jekyll site. In header.html;


~~~ html
      <html>
      <head>
          <script src="/js/p5.js"></script>
      </head>
~~~

Previously in my failed ambition to replicate the Nature Of Code book using straight java script, I was pointing my javascript to an HTML canvas element in the markdown post. As P5 deals with creating a canvas itself, I simply used a div with an id myCanvas to provide a placeholder for a canvas created in javascript.

Jekyll works by writing posts in markdown, which then get compiled into HTML with css styling. The great thing about markdown is that you can throw in html and javascript in amongst and it will render it to the page. As mentioned above I first needed a div for my canvas, then a link to my .js sketch file.

~~~ html

<div id="myCanvas"></div>
<script src="/js/p5Sketches/firstP5Sketch.js" type="text/javascript"></script>
~~~

In the .js sketch file p5 allows you to structure your code along the logic of a processing sketch with a setup() (runs once) and draw() (loops continuously). The only difference is that preceding "void" is replaced by "function". In the setup a new canvas is placed using a variable used to then call p5 methods and access their elements from the [library](http://p5js.org/reference/#/p5.Element). See the [github repository](https://github.com/processing/p5.js/wiki/Beyond-the-canvas) for more details.

The above example sketch is the one included in the [getting started](https://p5js.org/get-started/) section of the website, so I need to get a bit more creative, but its a good simple sketch to try and integrate. The only difference is that in the setup I needed to assign a variable to createCanvas() to point it towards my located div. Alternatively I could have set up the canvas and position it within the javascript, but I prefer to use CSS to take care all of that.

There is a slight quirk with my approach that means the p5 sketch extends slightly further in width that the div wrapper. I attempted to use the div client width as the width of the canvas but the two do not quite correlate. If you have any advice on this please tweet me on @chrisbamborough

~~~ javascript

function setup() {
  var canvasDiv = document.getElementById("myCanvas");
  var divWidth = document.getElementById("myCanvas").clientWidth;
  var sketchCanvas = createCanvas(divWidth,450);
  sketchCanvas.parent("myCanvas");
}

function draw() {
  if (mouseIsPressed){
    fill(0);
  } else {
    fill(255);
  }
  ellipse(mouseX, mouseY, 40, 40);

  if (keyIsPressed == true){
    clear();
  }

}

~~~
