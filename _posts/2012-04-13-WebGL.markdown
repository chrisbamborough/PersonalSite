---
layout: post
title:  "WebGL"
date:   2012-04-13 12:00:00
categories: blog
tags: Creative Code
image:
---
While I have been experimenting with the HTML5 Canvas and WebGL capabilities I've had trouble sharing the graphical output of my code. So after a couple of days tweaking I've worked out how to post them to Ghost. Scroll down for some [Three.js](threejs.org) mesh box magic.

For those wanting to do the same, make sure you reference a three.min.js (kept in your js assets folder) in the default.hbs file of your theme. Then open a script

~~~ Javascript
    <script>
        // create the scene
        var scene = new THREE.Scene();
        // create the camera
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        // initiate renderer
        var renderer = new THREE.WebGLRenderer();

        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        var geometry = new THREE.CubeGeometry(1, 1, 1);
        var material = new THREE.MeshBasicMaterial({
            color: 0xff0000, wireframe:true
        });
        var cube = new THREE.Mesh(geometry, material);
        scene.add(cube);

        camera.position.z = 5;


         // render via a loop
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);

            cube.rotation.x += 0.01;
            cube.rotation.y += 0.01;
        }

        render();
    </script>
~~~



<style>  
.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}
</style>

<script>
        // create the scene
        var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        var renderer = new THREE.WebGLRenderer();

        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        var geometry = new THREE.CubeGeometry(1, 1, 1);
        var material = new THREE.MeshBasicMaterial({
            color: 0xff0000, wireframe:true
        });
        var cube = new THREE.Mesh(geometry, material);
        scene.add(cube);

        camera.position.z = 5;


         // need a render loop
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);

            cube.rotation.x += 0.01;
            cube.rotation.y += 0.01;
        }

        render();
    </script>
